= Debmake documentation source

All files included in this source tree are under the MIT license with its text
in the LICENSE file except for the files which explicitly claim differently in
them.

== Git repository

All updates should be committed to "devel" branch of the Git repository at

  https://salsa.debian.org/debian/debmake-doc

The "devel" branch is meant to build the non-native Debian binary package
using the “debmake -t -i debuild” command with quasi-native Debian package
scheme as described in 6.2.

== Build

The build process involves several files for make:

* Makefile -- "package" target does “debmake -t -i debuild”
* Makefile.common -- Common build parameters
* Makefile.pkg -- "pkg" target to generate the packaging example logs
* Makefile.dbk -- build documentation from the asciidoc source and the
  packaging example logs

== Normal build

The packaging of debmake-doc is:

* package build by "make package" from the git "devel" branch.
* upload package with "dput"
* Import to git with "gbp import-dsc" with "pristine-tar" (master, upstream,
  pristine-tar branches).
* Merge "master" into "devel" branch for readable history.

The execution of "make package" regenerates the packaging example logs and
runs full document package build in chroot.

This takes long time and isn't friendly for debug.

== Debug build

If DEBUG is set, the debug build of this source via XML can be done in 2 steps.

If DEBUG is set, this source build requires 2 steps.

 $ export DEBUG=1
 $ make pkg       # building packaging log example
 $ make css html  # building page just like the one in package

Results are found under tmp/

For checking updated English ASCIIDOC and translation PO contents, this
DEBUG=1 saves time.  You only build html page with existing packaging logs.

 $ make css html

to check their goodness when rebuilding.  (Long package example build results
are kept and reused.)

If you are checking ASCIIDOC markup issue and wish to test build without going
through XML, there is an alternative html build method:

 $ export DEBUG=1
 $ make pkg       # building packaging log example
 $ cd asciidoc
 $ make

The result is asciidoc/debameke-doc.html

== po

This directory contain po files for translator.

In order to keep the translation in sync with the English, po/pot files are
generated in the way not to contain <screen> contents and url attribute of
<ulink>.

This is done directory by the itstool from gettext (without using po4a).

== debian-template/

This directory contains a set of template files used to be copied to debian/*
files of many examples of the packaged source tree.

The changelog file is for the latest version of the package example which is
split up properly for each version and copied accordingly.

== debhello-<version>/

Each of these contains an entire set of an example source tree with properly
packaged debian/* files.

The upstream tarball used in the packaging example are generated by the tar
command while excluding the debian/ directory.

== debhello-<version>-pkg<revision>/

These are used to generate the packaging process example.

These contain step<number>.cmd files which are executed sequentially and the
results are logged to the step<number>.log files with the script program.

Since the step<number>.log files are terminated by <CR><LF>, may contain
<TAB>, and may be too long, the filtered step<number>.slog files are generated.

The <revision> is usually 1 and it matches the Debian revision of the binary
packages generated.

If you wish to run script-by-script, you can do the following
 $ make step<number>.raw

Some cmd files running program which waits user input uses the expect command
to automate it to move forward.

== .stamp

The existence of .stamp file in each directory indicates all the files in the
directory has been generated via Makefile and up-to-date.  This is not
committed to the VCS.

== asciidoc/

This contain the source text files written in the asciidoc markup. Their
extension is usually .txt .

// vim:se tw=78 sts=4 ts=4 et ai:
